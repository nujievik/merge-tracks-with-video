// Auto-generated by scripts/gen_extension_sets.py

use once_cell::sync::Lazy;
use std::collections::HashSet;
use std::ffi::OsStr;

pub static SUBS: Lazy<HashSet<&'static OsStr>> = Lazy::new(|| {
    let mut set = HashSet::new();
    set.insert(OsStr::new("ASS"));
    set.insert(OsStr::new("ASs"));
    set.insert(OsStr::new("AsS"));
    set.insert(OsStr::new("Ass"));
    set.insert(OsStr::new("aSS"));
    set.insert(OsStr::new("aSs"));
    set.insert(OsStr::new("asS"));
    set.insert(OsStr::new("ass"));
    set.insert(OsStr::new("MKS"));
    set.insert(OsStr::new("MKs"));
    set.insert(OsStr::new("MkS"));
    set.insert(OsStr::new("Mks"));
    set.insert(OsStr::new("mKS"));
    set.insert(OsStr::new("mKs"));
    set.insert(OsStr::new("mkS"));
    set.insert(OsStr::new("mks"));
    set.insert(OsStr::new("SRT"));
    set.insert(OsStr::new("SRt"));
    set.insert(OsStr::new("SrT"));
    set.insert(OsStr::new("Srt"));
    set.insert(OsStr::new("sRT"));
    set.insert(OsStr::new("sRt"));
    set.insert(OsStr::new("srT"));
    set.insert(OsStr::new("srt"));
    set.insert(OsStr::new("SSA"));
    set.insert(OsStr::new("SSa"));
    set.insert(OsStr::new("SsA"));
    set.insert(OsStr::new("Ssa"));
    set.insert(OsStr::new("sSA"));
    set.insert(OsStr::new("sSa"));
    set.insert(OsStr::new("ssA"));
    set.insert(OsStr::new("ssa"));
    set.insert(OsStr::new("SUB"));
    set.insert(OsStr::new("SUb"));
    set.insert(OsStr::new("SuB"));
    set.insert(OsStr::new("Sub"));
    set.insert(OsStr::new("sUB"));
    set.insert(OsStr::new("sUb"));
    set.insert(OsStr::new("suB"));
    set.insert(OsStr::new("sub"));
    set.insert(OsStr::new("SUP"));
    set.insert(OsStr::new("SUp"));
    set.insert(OsStr::new("SuP"));
    set.insert(OsStr::new("Sup"));
    set.insert(OsStr::new("sUP"));
    set.insert(OsStr::new("sUp"));
    set.insert(OsStr::new("suP"));
    set.insert(OsStr::new("sup"));
    set
});
