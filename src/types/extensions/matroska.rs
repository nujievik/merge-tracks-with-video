// Auto-generated by scripts/gen_extension_sets.py

use once_cell::sync::Lazy;
use std::collections::HashSet;
use std::ffi::OsStr;

pub static MATROSKA: Lazy<HashSet<&'static OsStr>> = Lazy::new(|| {
    let mut set = HashSet::new();
    set.insert(OsStr::new("MKA"));
    set.insert(OsStr::new("MKa"));
    set.insert(OsStr::new("MkA"));
    set.insert(OsStr::new("Mka"));
    set.insert(OsStr::new("mKA"));
    set.insert(OsStr::new("mKa"));
    set.insert(OsStr::new("mkA"));
    set.insert(OsStr::new("mka"));
    set.insert(OsStr::new("MKS"));
    set.insert(OsStr::new("MKs"));
    set.insert(OsStr::new("MkS"));
    set.insert(OsStr::new("Mks"));
    set.insert(OsStr::new("mKS"));
    set.insert(OsStr::new("mKs"));
    set.insert(OsStr::new("mkS"));
    set.insert(OsStr::new("mks"));
    set.insert(OsStr::new("MKV"));
    set.insert(OsStr::new("MKv"));
    set.insert(OsStr::new("MkV"));
    set.insert(OsStr::new("Mkv"));
    set.insert(OsStr::new("mKV"));
    set.insert(OsStr::new("mKv"));
    set.insert(OsStr::new("mkV"));
    set.insert(OsStr::new("mkv"));
    set.insert(OsStr::new("WEBM"));
    set.insert(OsStr::new("WEBm"));
    set.insert(OsStr::new("WEbM"));
    set.insert(OsStr::new("WEbm"));
    set.insert(OsStr::new("WeBM"));
    set.insert(OsStr::new("WeBm"));
    set.insert(OsStr::new("WebM"));
    set.insert(OsStr::new("Webm"));
    set.insert(OsStr::new("wEBM"));
    set.insert(OsStr::new("wEBm"));
    set.insert(OsStr::new("wEbM"));
    set.insert(OsStr::new("wEbm"));
    set.insert(OsStr::new("weBM"));
    set.insert(OsStr::new("weBm"));
    set.insert(OsStr::new("webM"));
    set.insert(OsStr::new("webm"));
    set
});
